# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: Java CI with Gradle

# 동작 조건 설정 : deploy 브랜치에 push 혹은 main 브랜치에 pull request가 발생할 경우 동작한다.
on:
  push:
    branches: [ "deploy" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  # Spring Boot 애플리케이션을 빌드하여 도커허브에 푸시하는 과정
  build-docker-image:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      # 1. Java 17 세팅
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      # 2. gradlew 실행 권한 설정
      - name: Set executable permissions for gradlew
        run: chmod +x ./gradlew

      # 3. Spring Boot 애플리케이션 빌드
      - name: Build with Gradle
        uses: gradle/gradle-build-action@67421db6bd0bf253fb4bd25b31ebb98943c375e1
        with:
          arguments: clean bootJar

      # 4. Docker 이미지 빌드
      - name: Docker image build
        run: docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/ping-backend-actions:${{ github.sha }} .

      # 5. DockerHub 로그인
      - name: Docker login
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      # 6. Docker Hub 이미지 푸시
      - name: Docker Hub push
        run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/ping-backend-actions:${{ github.sha }}

  # 위 과정에서 푸시한 이미지를 ec2에서 풀받아서 실행시키는 과정
  run-docker-image-on-ec2:
    # build-docker-image (위)과정이 완료되어야 실행됩니다.
    needs: build-docker-image
    runs-on: self-hosted

    steps:
#      - name: Send docker-compose.yml to EC2
#        uses: appleboy/scp-action@master
#        with:
#          host: ${{ secrets.SSH_IP }}
#          username: ubuntu
#          key: ${{ secrets.SSH_KEY }}
#          source: ./docker-compose.yml
#          target: /home/ubuntu/docker-compose.yml

      - name: executing remote ssh commands using password
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_IP }}
          username: ubuntu
          key: ${{ secrets.SSH_KEY }}
          script: |
            cd /home/ubuntu/
            
            # Docker Compose 실행
            sudo docker-compose -f docker-compose.yml --env-file ./.env up -d
            
            # 불필요한 도커 이미지 제거
            sudo docker image prune -f